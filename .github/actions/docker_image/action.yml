name: "docker_image"
description: "Based on a Dockerfile hash, checks if an image exists, if not, builds and pushes it"
inputs:
  dockerfile:
    description: "Path to the Dockerfile"
    required: true
outputs:
  image:
    description: "The fully qualified image generated"
    value: ${{ steps.image.outputs.image }}
runs:
  using: "composite"
  env:
    DOCKER_REGISTRY: ghcr.io
    DOCKER_REPOSITORY: ${{ github.repository }}/dockerfile-hash
  steps:
    - name: Create the tag by hashing the dockerfile
      id: tag
      run: echo "tag=$(shasum -a 256 ${{ inputs.dockerfile }} | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT
      shell: bash

    - name: concat the Docker image name
      id: image
      run: echo "image=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ steps.tag.outputs.tag }}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Check for existing image
      id: existing-image
      run: |
        GHCR_TOKEN=$(echo -n ${{ secrets.GITHUB_TOKEN }} | base64)
        echo "response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${GHCR_TOKEN}" https://${{ env.DOCKER_REGISTRY }}/v2/${{ env.DOCKER_REPOSITORY }}/manifests/${{ steps.tag.outputs.tag }})" >> $GITHUB_OUTPUT
      shell: bash

    - name: Log in to the Container registry
      if: ${{ steps.existing-image.outputs.response == '404' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      if: ${{ steps.existing-image.outputs.response == '404' }}
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ${{ inputs.dockerfile }}
        push: true
        tags: ${{ steps.image.outputs.image }}
