/**
 * On the test CI, we want to have multiple test runners in parallel.
 *
 * However, pulling down the densitydb repo to run the tests against each time is expensive.
 *
 * So, our strategy will be to serve the local files generated by generate_site.py,
 * and then any files not generated, we'll proxy the request to densitydb on Github.
 */

import express from 'express'
import proxy from 'express-http-proxy'

export async function startProxy(): Promise<void> {
    /**
     * If the user is using a branch that also exists on densitydb, we should use it as well.
     *
     * Otherwise, use `master`
     */

    const branch = await fetch(`https://github.com/densitydb/densitydb.github.io/tree/${process.env.BRANCH_NAME}`, { method: 'HEAD' }).then((response) => {
        switch (response.status) {
            case 200:
                return process.env.BRANCH_NAME!
            case 404:
                return 'master'
            default:
                throw new Error(`Unknown response code for branch check: ${response.status}`)
        }
    })

    // This is useful for debugging in case the proxy isn't working
    console.warn('Proxy is using branch...', branch)

    const app = express()

    app.use(express.static('test/density-db'), proxy('https://raw.githubusercontent.com', {
        proxyReqPathResolver(req) {
            return `/densitydb/densitydb.github.io/${branch}${req.path}`
        },
        userResHeaderDecorator(headers, userReq) {
            const fileExtension = (/\.(.+)$/.exec(userReq.path))?.[1]
            const mimeType = fileExtension ? { html: 'text/html', js: 'text/javascript' }[fileExtension] : undefined
            // eslint-disable-next-line @typescript-eslint/no-unused-vars -- We're removing the context-security-policy header via destructuring
            const { 'content-security-policy': _, ...filteredHeaders } = headers
            return {
                ...filteredHeaders,
                'content-type': mimeType ?? headers['content-type'],
            }
        },
    }))

    app.listen(8000)
}
