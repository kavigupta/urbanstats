/**
 * On the test CI, we want to have multiple test runners in parallel.
 *
 * However, pulling down the densitydb repo to run the tests against each time is expensive.
 *
 * So, our strategy will be to serve the local files generated by generate_site.py,
 * and then any files not generated, we'll proxy the request to densitydb on Github.
 */

import { execa } from 'execa'
import express from 'express'
import proxy from 'express-http-proxy'

export async function startProxy(): Promise<void> {
    if (process.env.GITHUB_TOKEN === undefined) {
        console.warn('GITHUB_TOKEN is not present, may get 429 too many requests')
    }

    /**
     * If the user is using a branch that also exists on densitydb, we should use it as well.
     *
     * Otherwise, use `master`
     */

    const branch = await fetch(`https://github.com/densitydb/densitydb.github.io/tree/${process.env.BRANCH_NAME}`, { method: 'HEAD' }).then((response) => {
        switch (response.status) {
            case 200:
                return process.env.BRANCH_NAME!
            case 404:
                return 'master'
            default:
                throw new Error(`Unknown response code for branch check: ${response.status}`)
        }
    })

    // This is useful for debugging in case the proxy isn't working
    console.warn('Proxy is using branch...', branch)

    if (branch !== 'master') {
        console.warn('Cloning repo...')
        await execa('git', ['clone', '-b', branch, '--single-branch', '--depth', '1', 'https://github.com/densitydb/densitydb.github.io.git'], { stdio: 'inherit' })
    }

    const app = express()

    app.use(
        express.static('test/density-db'),
        branch === 'master'
            ? proxy('https://urbanstats.org')
            : express.static('densitydb.github.io'),
    )

    app.listen(8000)
}
