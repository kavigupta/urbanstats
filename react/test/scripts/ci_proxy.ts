/**
 * On the test CI, we want to have multiple test runners in parallel.
 *
 * However, pulling down the densitydb repo to run the tests against each time is expensive.
 *
 * So, our strategy will be to serve the local files generated by generate_site.py,
 * and then any files not generated, we'll proxy the request to a CI proxy that has a copy of densitydb.
 */

import compression from 'compression'
import express from 'express'
import proxy from 'express-http-proxy'
import { z } from 'zod'

export async function startProxy(): Promise<void> {
    /**
     * If the user is using a branch that also exists on densitydb, we should use it as well.
     *
     * Otherwise, use `master`
     */
    const targetBranch = z.string().parse(process.env.URBANSTATS_BRANCH_NAME)

    const branch = await fetch(`https://github.com/densitydb/densitydb.github.io/tree/${targetBranch}`, { method: 'HEAD' }).then((response) => {
        switch (response.status) {
            case 200:
                return targetBranch
            case 404:
                return 'master'
            default:
                throw new Error(`Unknown response code for branch check: ${response.status}`)
        }
    })

    // This is useful for debugging in case the proxy isn't working
    console.warn('Proxy is using branch...', branch)

    const app = express()

    app.use(compression({ enforceEncoding: 'gzip' }))

    app.use(
        express.static('test/density-db'),
        proxy(`https://cdn.jsdelivr.net`, {
            proxyReqPathResolver(req) {
                return `/gh/densitydb/densitydb.github.io@${branch}${req.path}`
            },
            userResHeaderDecorator(headers, userReq) {
                const fileExtension = (/\.(.+)$/.exec(userReq.path))?.[1]
                const mimeType = fileExtension ? { html: 'text/html', js: 'text/javascript' }[fileExtension] : undefined
                // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-restricted-syntax -- We're removing the context-security-policy header via destructuring
                const { 'content-security-policy': _, ...filteredHeaders } = headers
                return {
                    ...filteredHeaders,
                    'content-type': mimeType ?? headers['content-type'],
                }
            },
        }),
    )

    app.listen(8000)
}
