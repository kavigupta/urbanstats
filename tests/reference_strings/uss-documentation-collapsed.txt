USS DocumentationUrban Stats Script (USS)Urban Stats Script (USS) is a scripting language for describing operations on data. It is designed to allow users to describe programs as if they refer to a single row of data, while simultaneously allowing global operations like regression.The basic syntax of USS should be familiar to any programmer. Arithmetic operations are written as you would expect. Feel free to edit the code below to see how the result changes:x = 2 ** 3 + 3 * 4
y = x + 2
y
22A full list of operators is available here.ListsThe language also supports lists, which are denoted by square brackets. You can use operators on these as well:x = [1, 2, 3]
y = x + [4, 5, 6]
y
[
    5,
    7,
    9
]For details on broadcasting, see the broadcasting section.ObjectsThe language also supports objects, which are denoted by curly braces. You can use operators on these as well:x = {a: 1, b: 2}
y = x.a + x.b
y
3Opaque TypesUSS has several opaque types, which are types that you can only interact with via functions. For example, colors are opaque types, and you can only create them using functions like rgb(), hsv(), or one of the predefined colors.x = rgb(0, 0, 1)
y = hsv(0, 1, 1)
[x, y, colorRed]
[
    rgb(0, 0, 1),
    rgb(1, 0, 0),
    rgb(0.9764705882352941, 0.42745098039215684, 0.42745098039215684)
]And you can only interact with them using functions like renderColor() or in other contexts that use color objects.x = rgb(0, 0, 1)
y = hsv(0, 1, 1)
renderColor([x, y, colorRed])
[
    "#0000ff",
    "#ff0000",
    "#f96d6d"
]RegressionsUSS supports linear regression via the regress(y, x1, x2, ..., weight) function, which returns an object with several properties:b: The intercept of the regression line.m1, m2, m3...: The coefficients for each independent variable.r2: The R-squared value of the regression.residuals: The residuals of the regression.For example, to perform a regression of y on x1 and x2, with the last point weighted more heavily, you could do:x1 = [1, 2, 3, 4, 5]
x2 = [2, 3, 2, 3, 2]
y = [2.2, 2.8, 3.6, 4.5, 5.1]
w = [1, 1, 1, 1, 10]
model = regression(y=y, x1=x1, x2=x2, weight=w)
model
{
    m1: 0.7421052631578966,
    m2: 0.029824561403522812,
    m3: NaN,
    m4: NaN,
    m5: NaN,
    m6: NaN,
    m7: NaN,
    m8: NaN,
    m9: NaN,
    m10: NaN,
    r2: 0.9977620429250791,
    residuals: [
        0.064035087719307,
        -0.10789473684211259,
        -0.02017543859648585,
        0.10789473684209483,
        -0.004385964912279938
    ],
    b: 1.3342105263157507
}Note that the inputs are all named arguments and the weight is optional.AggregationUSS provides several functions for aggregating data, including mean, median, quantile, percentile, min, max, sum, and more.For example, to calculate the mean of a vector, you can do:mean([1, 2, 3, 4, 50])
12We can also weight the mean, for example:mean([1, 2, 3, 4, 50], weights=[1, 1, 1, 1, 10])
36.42857142857143The same works for median, quantile, and percentile.percentile([1, 2, 3, 4, 50], 10, weights=[1, 1, 1, 1, 10])
2On the other hand, min, max, and sum do not support weights.min([1, 2, 3, 4, 50])
1BroadcastingBroadcasting is a feature of USS that allows you to operate on lists of values.Forward BroadcastingThe main kind of broadcasting is forward broadcasting, where you can apply operations to lists of elements. For example, if you have a list of numbers and you want to add 1 to each of them, you can do:x = [1, 2, 3]
y = x + 1
y
[
    2,
    3,
    4
]This will result in a list of numbers, where each element is 1 greater than the corresponding element in the original list.This also works with function calls, for example:x = [1, 2, 3]
y = sin(x)
y
[
    0.8414709848078965,
    0.9092974268256817,
    0.1411200080598672
]Even when the list is of functions:x = [sin, cos, tan]
y = x(pi)
y
[
    1.2246467991473532e-16,
    -1,
    -1.2246467991473532e-16
]You can also apply broadcasting to objects, for example:x = [{a: 1, b: 2}, {a: 3, b: 4}, {a: 5, b: 6}]
y = x.a
y
[
    1,
    3,
    5
]And even assigning to a property:x = [{a: 1, b: 2}, {a: 3, b: 4}, {a: 5, b: 6}]
x.a = [10, 20, 30]
x
[
    {
        a: 10,
        b: 2
    },
    {
        a: 20,
        b: 4
    },
    {
        a: 30,
        b: 6
    }
]Split BroadcastingThere is also split broadcasting, which is what happens when you use an if statement. For example, in the following code, the if statement is split into two branches, one for when y is greater than 65 and one for when it is not.x = [1, 2, 3]
y = [50, 61, 70]
if (y > 65) { x = x * 10 } else { x = x + 1 }
x
[
    2,
    3,
    30
]The if statement is split into two branches, one for when y is greater than 65 and one for when it is not.Keep in mind that this is exactly two cases, rather than one for each element. Using mean() reveals this:x = [1, 2, 3]
y = [50, 61, 70]
if (y > 65) { x = mean(x) } else { x = mean(x) }
x
[
    1.5,
    1.5,
    3
]Detailed TablesAll OperatorsThe following is a list of all operators that are available in USS.OperatorTypePrecedenceDescriptionExample**Binary1000Exponentiation (power)2 ** 3 → 8, 3 ** 2 → 9*Binary900Multiplication3 * 4 → 12, 5 * 2 → 10/Binary900Division10 / 2 → 5, 15 / 3 → 5+Unary/Binary800Unary plus, Addition, String concatenation+5, 2 + 3 → 5, "hello" + "world" → "helloworld"-Unary/Binary800Unary minus, Subtraction-5, 7 - 3 → 4==Binary700Equality (works with numbers, strings, booleans, null)5 == 5 → true, "hello" == "hello" → true, true == true → true!=Binary700Inequality (works with numbers, strings, booleans, null)5 != 3 → true, "hello" != "world" → true<Binary700Less than (numbers and strings)3 < 5 → true, "abc" < "def" → true>Binary700Greater than (numbers and strings)7 > 3 → true, "xyz" > "abc" → true<=Binary700Less than or equal (numbers and strings)5 <= 5 → true, 3 <= 5 → true>=Binary700Greater than or equal (numbers and strings)5 >= 3 → true, 5 >= 5 → true!Unary650Logical NOT!true → false, !false → true&Binary600Logical ANDtrue & false → false, true & true → true|Binary500Logical ORtrue | false → true, false | false → falseConstants and FunctionsUSS provides several built-in constants and functions for mathematical operations, data visualization, and data analysis. These are organized by category below.▶Basic Functions▶Color Functions▶Mathematical Functions▶Statistical Analysis▶Mapper Data Variables▶Logic and Control▶Map and Visualization▶Scaling Functions▶Color Ramps▶Unit Types▶Map InsetsUrban Stats Version <VERSION> by Kavi Gupta and Luke Brody. Last updated <LAST UPDATED>. Significant help with weather data from OklahomaPerson. Thanks to Taylor for the Metropolitan Clusters. Not for commercial use. If you find Urban Stats useful, please donate on kofi! Check out the Urban Stats Store!